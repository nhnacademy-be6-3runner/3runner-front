name: Java CI with Maven, SonarQube, and Docker

on:
  push:
    branches: [ "main" , "develop"]
#  pull_request:
#    branches: [ "main" , "develop" ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
      - name: Check out the code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: maven

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Build with Maven
        run: mvn clean -B package --file pom.xml

      - name: Run SonarQube
        run: mvn clean verify sonar:sonar -Dsonar.projectKey=${{secrets.SONAR_KEY}} -Dsonar.projectName=${{secrets.SONAR_NAME}} -Dsonar.host.url=${{secrets.SONAR_HOST}} -Dsonar.token=${{secrets.SONAR_TOKEN}}

      - name : Delete file in server
        run : sudo rm -rf /home/nhnacademy/front

      - name: Copy files to server
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SSH_IP }}
          username: ${{ secrets.SSH_ID }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.SSH_PORT }}
          source: "."
          target: "/home/nhnacademy/front"

      - name: Deploy to server via SSH
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_IP }}
          username: ${{ secrets.SSH_ID }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            cd /home/nhnacademy/front
            
            chmod +x ./renew_cert.sh
            chmod +x ./setup_cron.sh
            ./setup_cron.sh
            
            sudo docker build -t front-image1 .
            sudo docker build -t front-image2 .

            if ! sudo docker info | grep -q 'Swarm: active'; then
              sudo docker swarm init
            fi

            if ! sudo docker network ls | grep -q 'front_network'; then
              sudo docker network create --driver overlay front_network
            fi

            sudo docker service create --name front1 --publish 3000:8080 --network front_network front-image1
            
            sleep 90
            
            sudo docker service create --name front2 --publish 3001:8080 --network front_network front-image2
            
            sudo docker service create --name nginx --publish 80:80 --publish 443:443 \
            --mount type=bind,source=/home/nhnacademy/front/nginx.conf,target=/etc/nginx/nginx.conf \
            --mount type=bind,source=/home/nhnacademy/certbot/conf,target=/etc/letsencrypt \
            --mount type=bind,source=/home/nhnacademy/certbot/www,target=/var/www/certbot \
            --network front_network nginx:latest